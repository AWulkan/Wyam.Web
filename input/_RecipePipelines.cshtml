@model string

<ul>
    @{
        List<IDocument> pipelines = Documents
            .FromPipeline(Docs.Api)
            .FirstOrDefault(x => x.String(CodeAnalysisKeys.QualifiedName) == Model)
                ?.DocumentList(CodeAnalysisKeys.Members)
                ?.Where(x => x.String(CodeAnalysisKeys.Kind) == "Property" 
                    && x.String(CodeAnalysisKeys.Accessibility) == "Public" 
                    && x.Document(CodeAnalysisKeys.Type).DocumentList(CodeAnalysisKeys.BaseTypes)?.FirstOrDefault()?.String(CodeAnalysisKeys.Name) == "Pipeline")
                ?.ToList()
            ?? new List<IDocument>();
        foreach(IDocument pipeline in pipelines)
        {
            <li>        
                <p>
                    <strong><code>@(pipeline.Document(CodeAnalysisKeys.ContainingType).String(CodeAnalysisKeys.DisplayName)).@(pipeline.String(CodeAnalysisKeys.DisplayName))</code></strong>
                </p>
                @{
                    string summary = pipeline.String(CodeAnalysisKeys.Summary);            
                    if(!string.IsNullOrWhiteSpace(summary))
                    {							
                        <p>@Html.Raw(summary)</p>
                    }
                }
                @Html.Partial("_Keys", new KeysModel(pipeline.Document(CodeAnalysisKeys.Type).String(CodeAnalysisKeys.QualifiedName), false)
                {
                    Intro = "<p><i>The following named modules are part of this pipeline (not every module in the pipeline may have a name). These give insight into how the pipeline operates and provide defined insertion points for pipeline overrides if needed.</i></p>"
                })
            </li>
        }
    }
</ul>