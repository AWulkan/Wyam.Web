@{
	Layout = @"..\_Master.cshtml";
	ViewData["Title"] = "Modules - " + Model["DisplayName"];
}

@section Sidebar {
	@Html.Partial("Sidebar\\_Modules")
}

<section class="content-header">
	<h1>@Model.Name()</h1>
</section>
<section class="content">
	@RenderBody()  @* Empty, but needs to be here *@
	
	@{
		// Summary
		string summary = Model.String("Summary");
		if(!string.IsNullOrWhiteSpace(summary))
		{
			<div class="lead">@Html.Raw(summary)</div>
		}
		
		<h1>Usage</h1>
		<hr />
		
		// Constructors
		<ul>			
		@{			
			IReadOnlyList<IDocument> constructors =
				Model.List<IDocument>("Constructors")
					?.OrderBy(x => x["DisplayName"])
					.ToList();
			if(constructors != null && constructors.Count > 0)
			{
				foreach(IDocument constructor in constructors)
				{
					string syntax = constructor.String("Syntax");
					string constructorSummary = constructor.String("Summary");
					IReadOnlyList<IDocument> parameters = constructor.List<IDocument>("Parameters");
					IReadOnlyList<ReferenceComment> paramComments = constructor.List<ReferenceComment>("Params");
					<li>
						@{
							if(!string.IsNullOrWhiteSpace(syntax))
							{
								<p><code>@(syntax.Substring(syntax.IndexOf(" ") + 1))</code></p>
							}
							if(!string.IsNullOrWhiteSpace(constructorSummary))
							{
								<p>@Html.Raw(constructorSummary)</p>
							}
							if(parameters != null && parameters.Count > 0 && paramComments != null && paramComments.Count > 0)
							{
								<ul>
									@foreach(IDocument parameter in parameters)
									{
										string paramSummary = paramComments?.Where(x => x.Name.Equals(parameter["Name"])).Select(x => x.Html).FirstOrDefault();
										paramSummary = paramSummary == null ? string.Empty : ": " + paramSummary;
										<li><p><code>@parameter["Name"]</code>@paramSummary</p></li>
									}
								</ul>
							}
						}
					</li>				
				}
			}
			else
			{
				<li><p><code>@(Model.Name())()</code></p></li>
			}
		}
		</ul>
		
		// Methods
		// TODO: Concat with base fluent methods
		IReadOnlyList<IDocument> methods =
			Model.List<IDocument>("Members")
				?.Where(x => x.String("Kind") == "Method" && x.Get<IDocument>("ReturnType")["SymbolId"].Equals(Model["SymbolId"]))
					.OrderBy(x => x["DisplayName"])
					.ToList();
		if(methods != null && methods.Count > 0)
		{
			<h2>Fluent Methods</h2>
			<p>Chain these methods together after the constructor to modify behavior.</p>
			<ul>
				@foreach(IDocument method in methods)
				{
					string syntax = method.String("Syntax");
					string methodSummary = method.String("Summary");
					IReadOnlyList<IDocument> parameters = method.List<IDocument>("Parameters");
					IReadOnlyList<ReferenceComment> paramComments = method.List<ReferenceComment>("Params");
					<li>
						@{
							if(!string.IsNullOrWhiteSpace(syntax))
							{
								// Two spaces - once for access modifier and again for return type
								<p><code>@(syntax.Substring(syntax.IndexOf(" ", syntax.IndexOf(" ") + 1) + 1))</code></p>
							}
							if(!string.IsNullOrWhiteSpace(methodSummary))
							{
								<p>@Html.Raw(methodSummary)</p>
							}
							if(parameters != null && parameters.Count > 0 && paramComments != null && paramComments.Count > 0)
							{
								<ul>
									@foreach(IDocument parameter in parameters)
									{
										string paramSummary = paramComments?.Where(x => x.Name.Equals(parameter["Name"])).Select(x => x.Html).FirstOrDefault();
										paramSummary = paramSummary == null ? string.Empty : ": " + paramSummary;
										<li><p><code>@parameter["Name"]</code>@paramSummary</p></li>
									}
								</ul>
							}
						}
					</li>				
				}				
			</ul>
		}		
	}	
</section>